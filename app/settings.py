"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 1.11.13.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import datetime
import dj_database_url
import sys
from django.core.exceptions import ImproperlyConfigured

# FIREBASE IMPORT
import firebase_admin
from firebase_admin import credentials

def get_from_environment(var_name):
    try:
        var = os.environ.get(var_name, 'random thing')
        return var
    except KeyError:
        raise ImproperlyConfigured(var_name + " variable not found in the environment.")


def get_path(val):
    return os.path.join(BASE_DIR, val)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

ALLOWED_HOSTS = ['*']

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '6jc))glv(nsi95=ec@hi*^xd0_#r#uy5ekt2a)verqzl=h177b'

# Application definition
INSTALLED_APPS = [
    'grappelli',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'user',
    'general',
    'authe',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'

#Corse Header
CORS_ORIGIN_ALLOW_ALL = True



# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# -----------------------------------------------------------
# DEBUGGING & LOGGING
# -----------------------------------------------------------
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(pathname)s] [%(filename)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'detail': {
            'format': "[%(levelname)s(%(name)s): %(asctime)s] \nPath: %(pathname)s |Function: %(funcName)s |Line: %(lineno)s \nMessage: %(message)s \n",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'exceptionformat': {
            'format': "[EXCEPTION: %(asctime)s] \n%(message)s \n",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
    },
    'handlers': {
        'mail_admins': {
            'class': 'django.utils.log.AdminEmailHandler',
            'level': 'ERROR',
            # But the emails are plain text by default - HTML is nicer
            'include_html': True,
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'alllogs.log',
            'formatter': 'verbose'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'detail',
        },
        'exceptionconsole': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'exceptionformat',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['console', 'mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django': {
            'handlers': ['file'],
            'propagate': False,
            'level': 'DEBUG',
        },
        'application': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        'exception': {
            'handlers': ['exceptionconsole'],
            'level': 'ERROR',
        }
    }
}

# -----------------------------
# REDIS
# -----------------------------
# redis_url = os.getenv('REDISCLOUD_URL', 'redis://localhost:6379')
redis_url = get_from_environment('REDISCLOUD_URL')

# -----------------------------
# CELERY
# -----------------------------
CELERY_BROKER_URL = get_from_environment('REDISCLOUD_URL')
CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'application/text']


# -----------------------------------------------------------
# INTERNATIONALIZATION
# ------------------------------------------------------------
# https://docs.djangoproject.com/en/1.11/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Calcutta'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# -----------------------------------------------------------
# HEROKU DEPLOYEMENT & PRODUCTION SETTINGS
# ------------------------------------------------------------
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

SECRET_KEY = get_from_environment('DJANGO_SECRET_KEY')


# --------------------------------------------------------
# STATIC FILES HANDLING
# --------------------------------------------------------
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
STATIC_ROOT = 'static'
STATIC_URL = '/static/'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# --------------------------------------------------------
# LINKEDIN
# --------------------------------------------------------
# LinkedIn
LINKEDIN = {
    'client_id': 'your-linkedin-client-id',
    'client_secret': 'your-linkedin-client-secret'
}

# -----------------------------
# STREAM
# -----------------------------
STREAM_API_KEY = 'your-stream-api-key'
STREAM_API_SECRET = 'your-stream-api-secret'


# --------------------------------------------------------
# FIREBASE
# --------------------------------------------------------
FIREBASE_PROJECT_ID = 'app-id'

firebase_cred = credentials.Certificate(get_path('app/here-your-firebase-cred-file.json'))
firebase_ins = firebase_admin.initialize_app(firebase_cred, {'projectId': FIREBASE_PROJECT_ID})

# --------------------------------------------------------
# AWS
# --------------------------------------------------------

AWSAccessKeyID = 'AKIA42LNSKGPR26XC25X'
AWSSecretAccessKey = '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'

# --------------------------------------------------------
# AUTHENTICATION & PERMISSION
# --------------------------------------------------------

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    )
}

JWT_AUTH = {
    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_ALGORITHM': 'HS256',
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 300,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=300),
    'JWT_AUDIENCE': None,
    'JWT_ISSUER': None,
    'JWT_ALLOW_REFRESH': True,
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=300),
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
}

# --------------------------------------------------------
# LOCAL SETTINGS DATABASE SETUP
# --------------------------------------------------------
# This part is used to import local settings while development
# And so comment this part on production

CELERY_BROKER_URL = 'redis://localhost:6379'
env_setup = get_from_environment('SETUP')
if env_setup  == 'PRODUCTION' or env_setup == 'STAGING':
    DATABASES = {
    'default': dj_database_url.config(
        default=get_from_environment('DATABASE_URL')
    )
    }

else:
    try:
        from .local_settings import *

        ON_DEVELOPMENT = True
    except:
        pass